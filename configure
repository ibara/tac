#!/bin/sh

# This configure script written by Brian Callahan <bcallah@openbsd.org>
# and released into the Public Domain.

cccheck() {
  if [ ! -z "$CC" ] ; then
cat << EOF > conftest.c
int main(void){return 0;}
EOF
    $CC -o conftest conftest.c > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      ./conftest
      if [ $? -eq 0 ] ; then
	rm -f conftest conftest.c
	cc="$CC"
	return 0
      else
	echo "could not build a working executable"
	echo "Please ensure your C compiler is a native compiler"
	exit 1
      fi
    else
      rm -f conftest conftest.c
    fi
  fi

  for compiler in cc clang pcc cparser gcc ; do
cat << EOF > conftest.c
int main(void){return 0;}
EOF

    $compiler -o conftest conftest.c > /dev/null 2>&1

    if [ $? -eq 0 ] ; then
      ./conftest
      if [ $? -eq 0 ] ; then
	rm -f conftest conftest.c
	cc="$compiler"
	return 0
      else
	echo "could not build working executables"
	echo "Please ensure your C compiler is a native compiler"
	exit 1
      fi
    else
      rm -f conftest conftest.c
    fi
  done
  return 1
}

getprognamecheck() {
  cat << EOF > conftest.c
#include <stdlib.h>
int main(void){getprogname();return 0;}
EOF
  "$cc" $tflags -o /dev/null conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest.c
    return 0
  else
    rm -f conftest.c
    return 1
  fi
}

pledgecheck() {
  cat << EOF > conftest.c
#include <unistd.h>
int main(void){pledge(NULL,NULL);return 0;}
EOF
  $cc $tflags -o conftest conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.c
    return 0
  else
    rm -f conftest conftest.c
    return 1
  fi
}

reallocarraycheck() {
  cat << EOF > conftest.c
#include <stdlib.h>
int main(void){reallocarray(NULL, 0, 0);return 0;}
EOF
  $cc $tflags -o conftest conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.c
    return 0
  else
    rm -f conftest conftest.c
    return 1
  fi
}

libbsd=0

if [ ! -z "$CFLAGS" ] ; then
  cflags="$CFLAGS"
else
  cflags=""
fi

if [ ! -z "$LDFLAGS" ] ; then
  ldflags="$LDFLAGS"
else
  ldflags=""
fi

printf "checking for C compiler... "
cccheck
if [ $? -eq 0 ] ; then
  echo "$cc"
else
  echo "not found"
  echo "Please install a C compiler and re-run configure."
  exit 1
fi

printf "checking for OS... "
os=`uname -s`
echo "$os"

if [ "x$os" = "xNetBSD" ] ; then
  tflags="-D_OPENBSD_SOURCE"
  cflags="$cflags $tflags"
fi

printf "checking for getprogname... "
getprognamecheck
if [ $? -eq 0 ] ; then
  echo "yes"
else
  libbsd=1
  echo "no"
fi

printf "checking for pledge... "
pledgecheck
if [ $? -eq 0 ] ; then
  cflags="$cflags -DHAVE_PLEDGE"
  echo "yes"
else
  echo "no"
fi

printf "checking for reallocarray... "
reallocarraycheck
if [ $? -eq 0 ] ; then
  echo "yes"
else
  libbsd=1
  echo "no"
fi

if [ $libbsd -eq 1 ] ; then
  printf "checking for libbsd... "
  libbsdcheck
  if [ $? -ne 0 ] ; then
    echo "not found"
    echo "You need libbsd to build tac!"
    exit 1
  fi
  cflags="$cflags -DLIBBSD"
  libs=" -lbsd"
  echo "yes"
fi

printf "creating Makefile... "
cat << EOF > Makefile
# This Makefile automatically generated by configure.

CC =		$cc
CFLAGS =	$cflags

PROG =		tac
OBJS =		tac.o

PREFIX ?=	/usr/local
MANDIR ?=	\${PREFIX}/man

all: \${OBJS}
	\${CC} \${LDFLAGS} -o \${PROG} \${OBJS}

install:
	install -c -S -s -m 755 \${PROG} \${PREFIX}/bin
	install -c -S -m 644 \${PROG}.1 \${MANDIR}/man1

clean:
	rm -f \${PROG} \${OBJS}

distclean: clean
	rm -f Makefile \${PROG}.core
EOF
echo "done"
